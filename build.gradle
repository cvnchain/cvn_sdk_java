buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		maven {url "$repos_host"}
		maven {url "$obr_host"}
	}
	dependencies {

//		classpath "onight.osgi:zpp-gradle_1.8:3.4.0"
		classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.10"
	}
}

plugins {
	id 'com.github.johnrengelman.shadow' version '2.0.4'
}
if("${platform}"=="osgi") {

	apply plugin: 'zippo'

	group 'org.brewchain.sdk'
	version "1.1.0_${platform}"

	sourceCompatibility = 1.8

	repositories {
		mavenCentral()
		maven{
			url "http://124.71.16.205:25566/nexus/content/repositories/brewchain/"
		}
	}

	dependencies {
		testCompile group: 'junit', name: 'junit', version: '4.12'

		annotationProcessor 'org.projectlombok:lombok:1.18.8'
		compileOnly 'org.projectlombok:lombok:1.18.8'
		includeInJar "com.madgag.spongycastle:core:1.58.0.0"
		includeInJar "com.madgag.spongycastle:prov:1.58.0.0"
		compile "org.slf4j:slf4j-api:1.7.25"
		includeInJar "com.google.code.gson:gson:2.8.5"
		compile "com.google.protobuf:protobuf-java:3.6.1"
		compile "com.googlecode.protobuf-java-format:protobuf-java-format:1.4"
		includeInJar "com.squareup.okhttp3:okhttp:3.14.2"
		runtime "ch.qos.logback:logback-core:1.2.3"
		runtime "ch.qos.logback:logback-classic:1.2.3"

	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	protobuf {
//		generatedFilesBaseDir = "$projectDir/src/"
		generatedFilesBaseDir = "src/"
		protoc {
			// Download from repositories
			artifact = 'com.google.protobuf:protoc:3.6.1'
		}
	}

	sourceSets {
		main {
			resources {
				srcDir '$projectDir/src/main/resources'
			}
			proto {
				srcDir '$projectDir/src/main/proto'
			}
			java {
				srcDir '$projectDir/src/main/java'
			}
		}
	}

	test.enabled = false

	jar {
		manifest{
			attributes( 'Import-Ignore':'ch.qos.logback,org.json,org.bouncycastle,com.aliyun.oss,org.apache.commons.fileupload,org.apache.poi,com.aliyuncs,com.aliyuncs.exceptions,org.apache.commons,org.codehaus.plexus.util,com.nos.sdk.contract,com.nos.sdk.model,org.spongycastle.util.encoders,org.spongycastle,org.spongycastle.asn1.x9,okhttp3,com.develop.mnemonic,com.google.gson')
		}
	}

}else{
	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: "com.google.protobuf"
	group 'io.github.cryptoworldchain'
	version "${version}"

	apply plugin: 'com.github.johnrengelman.shadow'



//	signing {
//		required { gradle.taskGraph.hasTask("uploadArchives") }
//		sign configurations.archives
//	}

	repositories {
		mavenCentral()
		maven{
			url "http://124.71.16.205:25566/nexus/content/repositories/brewchain/"
		}
	}

	dependencies {
		testCompile group: 'junit', name: 'junit', version: '4.12'
		testCompile 'org.projectlombok:lombok:1.18.16'

//		annotationProcessor 'org.projectlombok:lombok:1.18.8'
		compileOnly 'org.projectlombok:lombok:1.18.16'
		compile "com.madgag.spongycastle:core:1.58.0.0"
		compile "com.madgag.spongycastle:prov:1.58.0.0"
		compile "org.slf4j:slf4j-api:1.7.25"
		compile "com.google.code.gson:gson:2.8.5"
		compile "com.google.protobuf:protobuf-java:3.6.1"
		compile "com.googlecode.protobuf-java-format:protobuf-java-format:1.4"
		compile "com.alibaba:fastjson:1.2.51"
		compile "com.squareup.okhttp3:okhttp:3.14.2"
//		compile 'com.google.protobuf:protobuf-java-util:3.6.1'

//		compile ("org.fc.zippo:org.fc.zippo.oapi:4.1.0")
		compile  fileTree(dir: 'lib', include: '*.jar')
		runtime "ch.qos.logback:logback-core:1.2.3"
		runtime "ch.qos.logback:logback-classic:1.2.3"

	}

	protobuf {
		generatedFilesBaseDir = "$projectDir/src/"
		protoc {
			// Download from repositories
			artifact = 'com.google.protobuf:protoc:3.6.1'
		}
	}

	test.enabled = false

	// 最主要的是这里
	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}
//				snapshotRepository(url:"http://47.240.121.134:25566/nexus/content/repositories/snapshots/"){
//					authentication(userName: obr_usr, password: obr_pwd)
//				}
//				repository(url:"http://47.240.121.134:25566/nexus/content/repositories/brewchain/"){
//					authentication(userName: obr_usr, password: obr_pwd)
//				}


				pom.project {
					name 'cwv java sdk'
					packaging 'jar'
					// optionally artifactId can be defined here
					description 'Java sdk for Dapps interact with cwv blockchain node'
					url 'https://github.com/CryptoWorldChain/cwv_java_sdk'

					scm {
						connection 'scm:git:git://github.com/CryptoWorldChain/cwv_java_sdk.git'
						developerConnection 'scm:git:ssh://github.com/CryptoWorldChain/cwv_java_sdk.git'
						url 'http://github.com/CryptoWorldChain/cwv_java_sdk/tree/master'
					}

					licenses {
						license {
							name 'The Apache License, Version 2.0'
							url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}

					developers {
						developer {
							id 'Stepheniens'
							name 'Stepheniens'
							email 'Stepheniens@protonmail.com'
						}
					}
				}
			}
		}
	}
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from 'build/docs/javadoc'
	}
	artifacts {
		archives jar
		archives javadocJar
		archives sourcesJar
	}
	sourceSets {
		main {
			resources {
				srcDir '$projectDir/src/main/resources'
			}
			proto {
				srcDir '$projectDir/src/main/proto'
			}
			java {
				srcDir '$projectDir/src/main/java'
			}
		}
	}
	tasks.withType(Javadoc) { //兼容中文

		options.addStringOption('Xdoclint:none','-quiet')

		options.addStringOption('encoding','UTF-8')

		options{

			encoding"UTF-8"

			charSet'UTF-8'

			links"http://docs.oracle.com/javase/7/docs/api"

		}

	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}


	jar {

		from {
			configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
		}
	}

}